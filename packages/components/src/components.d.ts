/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface NngCourseCard {
        "course": any;
        "required": boolean;
    }
    interface NngCourseEnroll {
        "courses": any;
        "saved": boolean;
    }
}
export interface NngCourseEnrollCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNngCourseEnrollElement;
}
declare global {
    interface HTMLNngCourseCardElement extends Components.NngCourseCard, HTMLStencilElement {
    }
    var HTMLNngCourseCardElement: {
        prototype: HTMLNngCourseCardElement;
        new (): HTMLNngCourseCardElement;
    };
    interface HTMLNngCourseEnrollElementEventMap {
        "save": boolean;
    }
    interface HTMLNngCourseEnrollElement extends Components.NngCourseEnroll, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNngCourseEnrollElementEventMap>(type: K, listener: (this: HTMLNngCourseEnrollElement, ev: NngCourseEnrollCustomEvent<HTMLNngCourseEnrollElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNngCourseEnrollElementEventMap>(type: K, listener: (this: HTMLNngCourseEnrollElement, ev: NngCourseEnrollCustomEvent<HTMLNngCourseEnrollElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNngCourseEnrollElement: {
        prototype: HTMLNngCourseEnrollElement;
        new (): HTMLNngCourseEnrollElement;
    };
    interface HTMLElementTagNameMap {
        "nng-course-card": HTMLNngCourseCardElement;
        "nng-course-enroll": HTMLNngCourseEnrollElement;
    }
}
declare namespace LocalJSX {
    interface NngCourseCard {
        "course"?: any;
        "required"?: boolean;
    }
    interface NngCourseEnroll {
        "courses"?: any;
        "onSave"?: (event: NngCourseEnrollCustomEvent<boolean>) => void;
        "saved"?: boolean;
    }
    interface IntrinsicElements {
        "nng-course-card": NngCourseCard;
        "nng-course-enroll": NngCourseEnroll;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "nng-course-card": LocalJSX.NngCourseCard & JSXBase.HTMLAttributes<HTMLNngCourseCardElement>;
            "nng-course-enroll": LocalJSX.NngCourseEnroll & JSXBase.HTMLAttributes<HTMLNngCourseEnrollElement>;
        }
    }
}
